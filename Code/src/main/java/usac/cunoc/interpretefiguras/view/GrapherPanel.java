/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package usac.cunoc.interpretefiguras.view;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.util.ArrayList;
import usac.cunoc.interpretefiguras.logic.geometry.BasicGeometricObject;
import usac.cunoc.interpretefiguras.logic.geometry.CircleGeometric;
import usac.cunoc.interpretefiguras.logic.geometry.LineGeometric;
import usac.cunoc.interpretefiguras.logic.geometry.PolygonGeometric;
import usac.cunoc.interpretefiguras.logic.geometry.RectangleGeometric;
import usac.cunoc.interpretefiguras.logic.geometry.SquareGeometric;

/**
 *
 * @author drymnz
 */
public class GrapherPanel extends javax.swing.JPanel {

    private ArrayList<BasicGeometricObject> lisGeometricObject;
    private AffineTransform affineTransform = new AffineTransform();
    private AffineTransform affineTransformNormal = new AffineTransform();
    private String nameAnimation = "";

    private int ancho = 100;
    private int alto = 100;

    /**
     * Creates new form GrapherPanel
     */
    public GrapherPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 216, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 145, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void Graficar(ArrayList<BasicGeometricObject> lisGeometricObject) {
        this.ancho = 100;
        this.alto = 100;
        this.lisGeometricObject = lisGeometricObject;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
        //Mejoramiento en la graficacion
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        if (this.lisGeometricObject != null) {
            for (BasicGeometricObject element : lisGeometricObject) {
                if (this.nameAnimation.equalsIgnoreCase(element.getId())) {
                    g2d.setTransform(this.affineTransform);
                } else {
                    g2d.setTransform(this.affineTransformNormal);
                }
                g2d.setColor(element.getColor().getColor());
                if (element instanceof CircleGeometric) {
                    CircleGeometric elem = (CircleGeometric) element;
                    g2d.fillOval(elem.getPosx(), elem.getPoxy(), elem.getRadio(), elem.getRadio());
                }
                if (element instanceof LineGeometric) {
                    LineGeometric elem = (LineGeometric) element;
                    g2d.drawLine(elem.getPosx(), elem.getPoxy(), elem.getPosXF(), elem.getPosYF());
                }
                if (element instanceof PolygonGeometric) {
                    PolygonGeometric elem = (PolygonGeometric) element;
                    Polygon polygon = new Polygon();

                    // calcula el angulo centra del poligono 
                    double anguloCentral = 360.0 / elem.getNumberSides();

                    for (int i = 0; i < elem.getNumberSides(); i++) {
                        // convierte el angulo central en un radio segun el lado a encontrar
                        double radianes = Math.toRadians(i * anguloCentral);
                        //calcula las coordenadas de x y y de cada vertice usando funciones trigonmetricas 
                        int xi = (int) (elem.getPosx() + elem.getWidth() * Math.cos(radianes));// calcula en el eje x
                        int yi = (int) (elem.getPoxy() + elem.getHigh() * Math.sin(radianes));// calcula en el eje y
                        //agrega el punto
                        polygon.addPoint(xi, yi);
                    }
                    g2d.fillPolygon(polygon);
                }
                if (element instanceof RectangleGeometric) {
                    RectangleGeometric elem = (RectangleGeometric) element;
                    g2d.fillRect(elem.getPosx(), elem.getPoxy(), elem.getWidth(), elem.getHigh());
                }
                if (element instanceof SquareGeometric) {
                    SquareGeometric elem = (SquareGeometric) element;
                    g2d.fillRect(elem.getPosx(), elem.getPoxy(), elem.getSquare(), elem.getSquare());
                }
                if (this.getWidth() < element.getPosx() ) {
                    //this.setSize(new Dimension(element.getPosx(), this.getHeight()));
                    this.ancho = element.getPosx();
                }
                if (this.getHeight() < element.getPoxy()) {
                    this.setSize(new Dimension(this.getWidth(), element.getPoxy()));
                    this.alto = this.getWidth();
                }
            }
        }
    }

    public void setAffineTransform(AffineTransform affineTransform) {
        this.affineTransform = affineTransform;
    }

    public void setNameAnimation(String nameAnimation) {
        this.nameAnimation = nameAnimation;
    }

    @Override
    public Dimension getPreferredSize() {
        // TODO Auto-generated method stub
        return new Dimension(this.ancho, this.ancho);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
