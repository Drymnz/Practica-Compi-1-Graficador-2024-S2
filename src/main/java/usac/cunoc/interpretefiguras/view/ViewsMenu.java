/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package usac.cunoc.interpretefiguras.view;

import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import usac.cunoc.interpretefiguras.InterpreteFiguras;
import usac.cunoc.interpretefiguras.logic.analyzer.Analyzer;
import usac.cunoc.interpretefiguras.logic.animition.AnimateObjectGeometry;
import usac.cunoc.interpretefiguras.logic.animition.Animation;
import usac.cunoc.interpretefiguras.logic.fileManager.FileInput;
import usac.cunoc.interpretefiguras.logic.fileManager.FileOutput;
import usac.cunoc.interpretefiguras.logic.fileManager.JPanelToPDF;
import usac.cunoc.interpretefiguras.logic.fileManager.JPanelToPNG;
import usac.cunoc.interpretefiguras.logic.reports.ReprotsToView;

/**
 *
 * @author drymnz
 */
public class ViewsMenu extends javax.swing.JFrame {

    private File userFile;
    private ArrayList<Animation> listAnimation;
    //en un Graphics2D dispose();//liberar memoria

    /**
     * Creates new form ViewsMenu
     */
    public ViewsMenu() {
        initComponents();
        this.setSize(InterpreteFiguras.HIGH, InterpreteFiguras.WIDTH);
        this.enableJButonLastGraphe(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        grapherPanel1 = new usac.cunoc.interpretefiguras.view.GrapherPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reportPanel1 = new usac.cunoc.interpretefiguras.view.ReportPanel();
        compiler1 = new usac.cunoc.interpretefiguras.view.Compiler();
        jButtonCopile = new javax.swing.JButton();
        jButtonLoad = new javax.swing.JButton();
        jButtonNewFile = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonAnimation = new javax.swing.JButton();
        jButtonExportPDF = new javax.swing.JButton();
        jButtonExportPNG = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setBackground(new java.awt.Color(255, 153, 153));

        javax.swing.GroupLayout grapherPanel1Layout = new javax.swing.GroupLayout(grapherPanel1);
        grapherPanel1.setLayout(grapherPanel1Layout);
        grapherPanel1Layout.setHorizontalGroup(
            grapherPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 382, Short.MAX_VALUE)
        );
        grapherPanel1Layout.setVerticalGroup(
            grapherPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 481, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(grapherPanel1);

        jScrollPane2.setBackground(new java.awt.Color(0, 204, 255));

        javax.swing.GroupLayout reportPanel1Layout = new javax.swing.GroupLayout(reportPanel1);
        reportPanel1.setLayout(reportPanel1Layout);
        reportPanel1Layout.setHorizontalGroup(
            reportPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 506, Short.MAX_VALUE)
        );
        reportPanel1Layout.setVerticalGroup(
            reportPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 481, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(reportPanel1);

        jButtonCopile.setText("Copilar");
        jButtonCopile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopileActionPerformed(evt);
            }
        });

        jButtonLoad.setText("Cargar");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jButtonNewFile.setText("Nuevo Archivo");
        jButtonNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewFileActionPerformed(evt);
            }
        });

        jButtonSave.setText("Guardar");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonAnimation.setText("Animar");
        jButtonAnimation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnimationActionPerformed(evt);
            }
        });

        jButtonExportPDF.setText("Exportar PDF");
        jButtonExportPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportPDFActionPerformed(evt);
            }
        });

        jButtonExportPNG.setText("Exportar PNG");
        jButtonExportPNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportPNGActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonLoad)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonNewFile)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCopile))
                    .addComponent(compiler1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExportPDF)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExportPNG)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLoad)
                    .addComponent(jButtonNewFile)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonCopile)
                    .addComponent(jButtonAnimation)
                    .addComponent(jButtonExportPDF)
                    .addComponent(jButtonExportPNG))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(compiler1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(22, 22, 22))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCopileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopileActionPerformed
        // Ejecutar el analisis
        if (this.compiler1.getTextArea().getText() != null && !(this.compiler1.getTextArea().getText().isBlank())) {
            Analyzer analyzer = new Analyzer(this.compiler1.getTextArea().getText());
            analyzer.Anilisar();
            if (analyzer.isErrorsAnalyzing()) {
                //ERROR 
            } else {
                //GRAFICAR 
                this.loadGraphAndReports(analyzer, this.reportPanel1);
            }
        }
    }//GEN-LAST:event_jButtonCopileActionPerformed

    private void loadGraphAndReports(Analyzer analyzer, ReportPanel view) {
        this.grapherPanel1.Graficar(analyzer.getParse().getLisGeometricObject());
        this.listAnimation = analyzer.getListAnimation();
        this.enableJButonLastGraphe(true);
        this.grapherPanel1.repaint();

        this.reportPanel1.removeAll();

        ReprotsToView loadReport = new ReprotsToView(analyzer, view);
        loadReport.loadReportMathOperation();
        loadReport.loadReportUserColor();
        loadReport.loadReportUserObject();
        loadReport.loadReportUserAnimation();
        this.reportPanel1.repaint();

        //this.pack();
    }

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        //Cargar archivo de texto
        this.verify();
        this.userFile = selectFile("Abrier");
        if (this.userFile != null) {
            this.compiler1.getTextArea().setText(new FileInput().cargarArchivoTexto(userFile));
        }
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        this.saven();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewFileActionPerformed
        //Nuevo archivo
        this.verify();
        this.userFile = null;
    }//GEN-LAST:event_jButtonNewFileActionPerformed

    private void jButtonExportPNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportPNGActionPerformed
        // Exportar en PNG
        File filePNG = this.selectFile("Guardar");
        JPanelToPNG converter = new JPanelToPNG();
        JPanel uno = this.grapherPanel1;
        if (converter.savePNG(filePNG, uno)) {
            JOptionPane.showMessageDialog(null, "Se guardo con exito");
        } else {
            JOptionPane.showMessageDialog(null, "no guardo con exito");
        }
    }//GEN-LAST:event_jButtonExportPNGActionPerformed

    private void jButtonExportPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportPDFActionPerformed
        // Exportar en PDF
        File filePDF = this.selectFile("Guardar");
        JPanelToPDF converter = new JPanelToPDF();
        JPanel uno = this.grapherPanel1;
        if (converter.jPanelToPDF(uno, filePDF, "IMGEN")) {
            JOptionPane.showMessageDialog(null, "Se guardo con exito");
        } else {
            JOptionPane.showMessageDialog(null, "no guardo con exito");
        }
    }//GEN-LAST:event_jButtonExportPDFActionPerformed

    private void jButtonAnimationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnimationActionPerformed
        //boton de animar
        AnimateObjectGeometry a = new AnimateObjectGeometry( this.grapherPanel1, this.listAnimation, this.jButtonAnimation,this.jButtonCopile);
        Thread thread = new Thread(a);
        thread.start();
    }//GEN-LAST:event_jButtonAnimationActionPerformed

    //verifica si hay un archivo cargado
    private void verify() {
        boolean fileLoad = (this.userFile != null);
        //true tienes un archivo cargado
        boolean areaTextIsBlank = this.compiler1.getTextArea().getText().isEmpty();
        //true el texto esta vacio
        String text = fileLoad ? "Tienes un archivo cargado" : areaTextIsBlank ? "" : "Tienes un texto que puedes perder";
        if (fileLoad || !areaTextIsBlank) {
            int respuesta = JOptionPane.showConfirmDialog(null, text + "¿Desea Guardar el texto que tiene?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (respuesta == JOptionPane.YES_OPTION) {
                //Guardar
                this.saven();
            }
        }
        this.compiler1.getTextArea().setText("");
    }

    // Guardar el texto en archivo
    private void saven() {
        try {
            if (this.userFile == null) {
                this.userFile = selectFile("Guardar");
            }
            if (new FileOutput().aguardarTexto(userFile, this.compiler1.getTextArea().getText())) {
                JOptionPane.showMessageDialog(null, "Se guardo con exito");
            } else {
                JOptionPane.showMessageDialog(null, "Error al guardar");
            }
        } catch (Exception e) {
            System.out.println("Error en la funcion saven - view menu ->" + e.getMessage());
        }
    }

    //Selecion de un archivo
    private File selectFile(String botonText) {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showDialog(null, botonText); // Muestra el diálogo
        if (result == JFileChooser.APPROVE_OPTION) {
            // El usuario seleccionó un archivo
            return fileChooser.getSelectedFile();
        }
        return null;
    }

    //desactivar y activar los bonotes que se pueden hacer con la grafica
    private void enableJButonLastGraphe(boolean station) {
        this.jButtonAnimation.setEnabled(station);
        this.jButtonExportPDF.setEnabled(station);
        this.jButtonExportPNG.setEnabled(station);
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private usac.cunoc.interpretefiguras.view.Compiler compiler1;
    private usac.cunoc.interpretefiguras.view.GrapherPanel grapherPanel1;
    private javax.swing.JButton jButtonAnimation;
    private javax.swing.JButton jButtonCopile;
    private javax.swing.JButton jButtonExportPDF;
    private javax.swing.JButton jButtonExportPNG;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonNewFile;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private usac.cunoc.interpretefiguras.view.ReportPanel reportPanel1;
    // End of variables declaration//GEN-END:variables
}
