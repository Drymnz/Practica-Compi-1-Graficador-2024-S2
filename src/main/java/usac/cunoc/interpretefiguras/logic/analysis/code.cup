package usac.cunoc.interpretefiguras.logic.analysis;
import java_cup.runtime.*;

//////////////////////////

    parser code {:
	public parser(Lexema lexer) {
        super(lexer);
    }
    private int contador;
    private int errorCounter;
    
// si lo manda
    public void syntax_error(Symbol cur_token) {
        errorCounter++;
        System.out.println("\n Error "+errorCounter+" - Clase<"+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
        }
    }

    public void printlnInter(String a){
         System.out.println(a);
    }
    /**
     * ***END CODE*******
     */
:}
/*************************************TERMINALES******************************************************/
terminal PUNTOYCOMA; /*PUNTUACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR,IGUAL;/*SIMBOLOS DE OPERACION*/
terminal PARENTESIS_A,PARENTESIS_C;/*AGRUPACION*/

terminal t_const,t_let,DOUBLEPUNTO;
terminal t_number,t_bigint;
/*************************************NO TERMINALES******************************************************/
nonterminal o,j,inicio,acciones,sematico;/*para el uso de operaciones aritmeticas*/
/*************************************PRECEDENCIA******************************************************/
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
/*************************************GRAMATICA******************************************************/
start with inicio;
/******operaciones matematicas*****/
inicio ::= acciones 
    {:	
    :}
    |
    ;

acciones
    ::= acciones sematico
    |sematico
    ;

sematico
    ::= 
    j
    ;
/******operaciones matematicas*****/
j ::= o:a 
    {:RESULT = a;:} /*A QUI ESTA EL TOTAL DE LA OPERACION*/
    | error
    {::}
    ;
o ::= o:a SUMAR o:b 
|  o:a RESTAR o:b 
|  o:a DIVIDIR o:b 
|  o:a MULTIPLICAR o:b 
| PARENTESIS_A o:a PARENTESIS_C
{:RESULT = a;:}
;