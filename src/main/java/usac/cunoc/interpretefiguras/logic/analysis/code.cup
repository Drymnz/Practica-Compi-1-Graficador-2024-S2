package usac.cunoc.interpretefiguras.logic.analysis;

import java_cup.runtime.*;
import java.util.ArrayList;
import usac.cunoc.interpretefiguras.logic.objectAnalysis.Token;
import usac.cunoc.interpretefiguras.logic.reports.*;
import usac.cunoc.interpretefiguras.logic.animition.ListAnimation;
import usac.cunoc.interpretefiguras.logic.geometry.*;

//////////////////////////

/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<MathOperation> listMathOperation = new ArrayList();
private ArrayList<BasicGeometricObject>  listGeometricObject = new ArrayList();
private ReportUserObjectGeometry reportUser = new ReportUserObjectGeometry();


	public parser(Lexema lexer) {
        super(lexer);
    }
    // Agregar el error de elctura
    private void addError(){
        this.getInfoPrint();
        System.out.println("ERORR");
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        String description = ListErrorAnalyzer.LEXEMA_ONE.getDescription();
        this.listError.add(new ReportErrorInterpreter(type, this.getTokePresent(), description));
    }
    // mostrar la infomacion actual que posee el analisador
    private void getInfoPrint(){
        System.out.println("\n"+" - Clase<"+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
    }
    // returnar el token actual
    private Token getTokePresent(){
        return new Token((cur_token.left+1), (cur_token.right+1), sym.terminalNames[cur_token.sym]);
    }
    //modificacion de sym.terminalNames[cur_token.sym]
    private void setTextToken(String modification){
        sym.terminalNames[cur_token.sym] = modification;
    }
    //erorr
    public void syntax_error(Symbol cur_token) {
        addError();
    }
    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }
    //Returnar el listado de errores
    public ArrayList<MathOperation> getListMathOperation() {
        return this.listMathOperation;
    }
    //Returnar el listado de ArrayList<BasicGeometricObject>  listGeometricObject
    public ArrayList<BasicGeometricObject> getLisGeometricObject() {
        return this.listGeometricObject;
    }
    //agregar reprote de mathoperation
    private void addReportMathOperation(ListMathOperation type){
        this.listMathOperation.add(new MathOperation(this.getTokePresent(), type));
    }
    //agregar circulo
    private void addCircle(String id, String px, String py, String r){
        this.listGeometricObject.add(new CircleGeometric( Integer.parseInt(px), Integer.parseInt(py),id, reportUser.getTypeColor(), Double.valueOf(r)));
    }
    //agregar cuadrado
    private void addSquare(String id, String px, String py, String l){
        this.listGeometricObject.add(new SquareGeometric( Integer.parseInt(px), Integer.parseInt(py),id, reportUser.getTypeColor(), Double.valueOf(l)));
    }
    //agregar rectangulo
    private void addRectangle(String id, String px, String py, String w, String h){
        this.listGeometricObject.add(new RectangleGeometric( Integer.parseInt(px), Integer.parseInt(py),id, reportUser.getTypeColor(), Double.valueOf(w), Double.valueOf(h)));
    }
    //agregar linea
    private void addLine(String id, String px, String py, String px2, String py2){
        this.listGeometricObject.add(new LineGeometric( Integer.parseInt(px), Integer.parseInt(py),id, reportUser.getTypeColor(), Double.valueOf(px2),Double.valueOf(py2)));
    }
    //agregar poligono
    private void addPolygon(String id, String px, String py, String l, String w, String h){
        this.listGeometricObject.add(new PolygonGeometric( Integer.parseInt(px), Integer.parseInt(py),id, reportUser.getTypeColor(),Integer.parseInt(l),Double.valueOf(w),Double.valueOf(h)));
    }
    /**
     * ***END CODE*******
     */
:}
/*************************************TERMINALES******************************************************/

/*SIMBOLOS DE OPERACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR,COMA;
terminal String ID,REAL_NUMEBERS;
/*AGRUPACION*/
terminal PARENTESIS_A,PARENTESIS_C;

/*COLOR*/
terminal BLUE,RED,YELLOW,GREEN,BLACK;
terminal CYAN,FUCHSIA,LAVENDER,MAROON;

/*TIPO DE GRAFICO*/
terminal CIRCLE,LINE,POLYGON,RECTANGLE,SQUARE;

/*OTRAS*/
terminal GRAFICAR,ANIMATION,LAST,OBJECT,CURVE;

/*************************************NO TERMINALES******************************************************/
nonterminal inicio;
nonterminal operacion;
/*para el uso de operaciones aritmeticas*/
nonterminal inico_opereacion;
nonterminal acciones,animtion;
nonterminal grafica,tipo_grafica,tipo_color,tipo_animation;
/*************************************PRECEDENCIA******************************************************/
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
/*************************************GRAMATICA******************************************************/
start with inicio;
/******operaciones matematicas*****/
inicio ::= acciones 
    |
    ;

acciones
    ::= acciones grafica
    |grafica
    ;

grafica
    ::=GRAFICAR tipo_grafica
    |animtion
    ;

tipo_grafica
    //  circulo (        <nombre>, <posx>,                  <posy>,              <radio>,                   <color>           )
    ::= CIRCLE  PARENTESIS_A ID:id  COMA inico_opereacion:px  COMA inico_opereacion:py  COMA inico_opereacion:r  COMA tipo_color PARENTESIS_C
    {:
    reportUser.incrementObjectCounter(ListObjectGeometric.CIRCLE);
    addCircle(id.toString(),px.toString(),py.toString(),r.toString());
    :}
    //cuadrado (        <nombre>,           <posx>,               <posy>,              <tamaÃ±o lado>,    <color>      )
    |SQUARE PARENTESIS_A ID:id COMA inico_opereacion:px COMA inico_opereacion:py COMA inico_opereacion:l COMA tipo_color PARENTESIS_C
    {:
    reportUser.incrementObjectCounter(ListObjectGeometric.SQUARE);
    addSquare(id.toString(),px.toString(),py.toString(),l.toString());
    :}
    //rectangulo (        <nombre>,              <posx>,                <posy>,             <ancho>,          <alto>,                   <color>      )
    |RECTANGLE PARENTESIS_A ID:id COMA inico_opereacion:px COMA inico_opereacion:py COMA inico_opereacion:w COMA inico_opereacion:h COMA tipo_color PARENTESIS_C
    {:
    reportUser.incrementObjectCounter(ListObjectGeometric.RECTANGLE);
    addRectangle(id.toString(),px.toString(),py.toString(),w.toString(),h.toString());
    :}
    //linea (         <nombre>,            <posx1>,               <posy1>,                 <posx2>,                 <posy2>,    <color>      )
    |LINE PARENTESIS_A ID:id COMA inico_opereacion:px COMA inico_opereacion:py COMA inico_opereacion:px2 COMA inico_opereacion:py2 COMA tipo_color PARENTESIS_C
    {:
    reportUser.incrementObjectCounter(ListObjectGeometric.LINE);
    addLine(id.toString(),px.toString(),py.toString(),px2.toString(),py2.toString());
    :}
    // poligono (        <nombre>,             <posx>,                 <posy>,        <cantidad lados>,              <ancho>,             <alto>,          <color>      )
    |POLYGON PARENTESIS_A ID:id COMA inico_opereacion:px COMA inico_opereacion:py COMA inico_opereacion:l COMA inico_opereacion:w COMA inico_opereacion:h COMA tipo_color PARENTESIS_C
    {:
    reportUser.incrementObjectCounter(ListObjectGeometric.POLYGON);
    addPolygon(id.toString(),px.toString(),py.toString(),l.toString(),w.toString(),h.toString());
    :}
    ;

animtion
    //  animar objeto anterior (        <tipoanimacion>,           <destinox>,              <destinoy>,             <orden>              )
    ::= ANIMATION OBJECT LAST PARENTESIS_A tipo_animation COMA inico_opereacion:dx COMA inico_opereacion:dy COMA inico_opereacion:o COMA PARENTESIS_C
    ;

tipo_animation
    ::= LINE {:reportUser.incrementAnimationCounter(ListAnimation.LINE);:}
    |CURVE {:reportUser.incrementAnimationCounter(ListAnimation.CURVE);:}
    ;

tipo_color
    ::=
    BLUE {:reportUser.incrementColorCounter(ListColor.BLUE);:}
    |RED {:reportUser.incrementColorCounter(ListColor.RED);:}
    |YELLOW {:reportUser.incrementColorCounter(ListColor.YELLOW);:}
    |GREEN {:reportUser.incrementColorCounter(ListColor.GREEN);:}
    |BLACK {:reportUser.incrementColorCounter(ListColor.BLACK);:}
    |CYAN {:reportUser.incrementColorCounter(ListColor.CYAN);:}
    |FUCHSIA {:reportUser.incrementColorCounter(ListColor.FUCHSIA);:}
    |LAVENDER {:reportUser.incrementColorCounter(ListColor.LAVENDER);:}
    |MAROON {:reportUser.incrementColorCounter(ListColor.MAROON);:}
    ;
    
/******operaciones matematicas*****/
inico_opereacion ::= operacion:a {:RESULT = a;:} /*A QUI ESTA EL TOTAL DE LA OPERACION*/
    ;
/******operaciones matematicas*****/
operacion 
::= operacion:a SUMAR operacion:b 
{:
setTextToken(a +" + "+ b);
addReportMathOperation(ListMathOperation.ADDITION);
RESULT = Integer.valueOf(a.toString()) + Integer.valueOf(b.toString());
:}
|  operacion:a RESTAR operacion:b 
{:
setTextToken(a +" - "+ b);
addReportMathOperation(ListMathOperation.SUBTRACTION);
RESULT = Integer.valueOf(a.toString()) - Integer.valueOf(b.toString());
:}
|  operacion:a DIVIDIR operacion:b 
{:
setTextToken(a +" / "+ b);
addReportMathOperation(ListMathOperation.DIVISION);
Double bDouble =   Double.valueOf(b.toString());
if (bDouble>0) {
  Double result = Double.valueOf(a.toString()) / bDouble;
   RESULT = result.intValue();
}
/// manejar un error de sintasis
RESULT = b;
:}
|  operacion:a MULTIPLICAR operacion:b 
{:
setTextToken(a +" * "+ b);
addReportMathOperation(ListMathOperation.MULTIPLICATION);
Double result = Double.valueOf(a.toString()) * Double.valueOf(b.toString());
RESULT = result.intValue();
:}
| PARENTESIS_A operacion:a {:RESULT = a;:} PARENTESIS_C 
| REAL_NUMEBERS:a {:RESULT = a;:}
;